<h2>C# 3 - Value and reference types</h2>

<h3>Memmory</h3>
<p>
The memory (RAM) of a computer is didivided in two differents parts, the Stack (Pile) and the Heap (Tas).
In the .NET Framework, types are distributed beetween this two parts.
</p>

<h3>Value types</h3>
<p>
Ex : Structure, Ennumerations and simply types (bool, int, float, ...).
Value types are allocated on the Stack.
Can be destroyed and created quickly.
Lifetime is determined by the defining scope.
The equal operator copy the type in a new one.
</p>

<h3>Reference types</h3>
<p>
Ex : Object and string.
Reference types are allocated on the Heap.    
The heap is for dynamic allocation, monitored by the .Net garbage collector.
The equal operator results in a copy of the reference.

The string type is special. It's an object but it is immutable. It's mean 
</p>

<h3>Boxing and unboxing</h3>
<p>
When the data moves from value types to reference types, it is termed ‘Boxing’ and the reverse is termed ‘UnBoxing’.
This movement of data creates a performance hit
</p>