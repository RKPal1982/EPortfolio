<h2>C# 2 - Delegates</h2>

<h3>Initialization</h3>
<p>Delegates allow you to store methods into variables.</p>
<pre>
delegate int MyDelegate (int param);
delegate void MyGenericDelegate&lt;T&gt; (T param);
</pre>

<h3>Builtins</h3>
<p>The .NET Framework provides some useful builtins.</p>
<pre>
delegate void Action&lt;T&gt; (T param); // You can use between 0 and 16 parameters
delegate TResult Func&lt;T1, T2, out TResult&gt; (T1 param1, T2 param2); // You can use between 0 and 16 parameters
delegate EventHandler (Object sender, EventArgs e);
</pre>

<h3>Use case 1</h3>
<pre>
delegate int MyDelegate(int param);

public static int Square(int i)
{
    return i * i;
}

public static void Main()
{
    MyDelegate a = new MyDelegate(Square);
    MyDelegate b = Square;
    Func&lt;int, int&gt; c = Square;

    Console.WriteLine(a(2) + "-" + b(3) + "-" + c(4)); // Write "4-9-16"
}
</pre>

<h3>Use case 2</h3>
<p>Delegates can store more than one method.</p>
<pre>
public static void Write1()
{
    Console.Write("1");
}

public static void Write2()
{
    Console.Write("2");
}

public static void Main()
{
    Action a = Write1;
    a += Write2;
    a(); // Write "12"
}
</pre>

<h3>Events</h3>
<p>
    Event keyword turns the delegate field into a property and make all its members private except += and -=.
    Moreover you don't have to initialize it.
</p>
<pre>
private static event Action a;

public static void Write1()
{
    Console.Write("1");
}

public static void Main()
{
    a += Write1;
    a += Write1;
    a(); // Write "11"
}
</pre>

<h3>Anonymous methods</h3>
<p>
    The method assigned to a delegate can be anonymous, it means the method doesn't need a declaration.
</p>
<pre>
public static void Main()
{
    Action a = delegate() { Console.Write("1"); };
    a += delegate() { Console.Write("2"); };
    a(); // Write "12"

    Func&lt;int, int&gt; b = delegate(int arg) { return arg * arg; };
    Console.WriteLine(b(2)); // Write "4"
}
</pre>

<h3>Lambda expressions</h3>
<p>
    Anonymous methods can be written more easily thanks to lambada expressions.
</p>
<pre>
public static void Main()
{
    Action a = () =&gt; Console.WriteLine("1");
    a(); // Write "1"

    Action&lt;int&gt; b = arg =&gt; Console.WriteLine(arg);
    b(1); // Write "1"

    Action&lt;string, string&gt; c = (arg1, arg2) =&gt; Console.WriteLine(arg1 + arg2);
    c("1", "2"); // Write "12"

    Action&lt;string, string&gt; d = (string arg1, string arg2) =&gt; Console.WriteLine(arg1 + arg2);
    d("1", "2"); // Write "12"

    Func&lt;int, int&gt; e = x =&gt; x * x;
    Console.WriteLine(e(2)); // Write "4"

    Func&lt;int, int&gt; f = x =&gt; { int i = 4; return i * x; };
    Console.WriteLine(f(2)); // Write "8"
}
</pre>